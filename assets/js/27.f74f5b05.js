(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{234:function(t,a,e){"use strict";e.r(a);var s=e(2),n=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"elements-of-an-argument-map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elements-of-an-argument-map","aria-hidden":"true"}},[t._v("#")]),t._v(" Elements of an argument map")]),t._v(" "),e("ArgdownSnippet",{attrs:{"initial-view":"map",title:""}},[e("template",{slot:"map"},[e("svg",{attrs:{width:"458pt",height:"229pt",viewBox:"0.00 0.00 458.00 228.80",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"}},[e("g",{staticClass:"graph",attrs:{id:"graph0",transform:"scale(1 1) rotate(0) translate(4 224.8)"}},[e("title",[t._v("Argument Map")]),t._v(" "),e("g",{staticClass:"cluster",attrs:{id:"clust1"}},[e("title",[t._v("cluster_1")]),t._v(" "),e("polygon",{attrs:{fill:"#dadada",stroke:"#dadada",points:"8,-8 8,-172.8 442,-172.8 442,-8 8,-8"}}),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"191.3232",y:"-158","font-family":"arial","font-size":"12.00",fill:"#000000"}},[t._v("I am a group")])]),t._v(" "),e("g",{staticClass:"cluster",attrs:{id:"clust2"}},[e("title",[t._v("cluster_2")]),t._v(" "),e("polygon",{attrs:{fill:"#bababa",stroke:"#bababa",points:"16,-16 16,-94.4 228,-94.4 228,-16 16,-16"}}),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"78.6524",y:"-79.6","font-family":"arial","font-size":"12.00",fill:"#000000"}},[t._v("I am a subgroup")])]),t._v(" "),e("g",{staticClass:"node",attrs:{id:"node1"}},[e("title",[t._v("n1")]),t._v(" "),e("path",{attrs:{fill:"#7570b3",stroke:"#000000",d:"M422,-64C422,-64 250,-64 250,-64 244,-64 238,-58 238,-52 238,-52 238,-36 238,-36 238,-30 244,-24 250,-24 250,-24 422,-24 422,-24 428,-24 434,-30 434,-36 434,-36 434,-52 434,-52 434,-58 428,-64 422,-64"}}),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"310.715",y:"-50","font-family":"arial","font-weight":"bold","font-size":"10.00",fill:"#000000"}},[t._v("argument 1")]),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"272.648",y:"-33","font-family":"arial","font-size":"10.00",fill:"#000000"}},[t._v("I am an attacking argument. ")])]),t._v(" "),e("g",{staticClass:"node",attrs:{id:"node4"}},[e("title",[t._v("n0")]),t._v(" "),e("path",{attrs:{fill:"#ffffff",stroke:"#d95f02","stroke-width":"2",d:"M315,-220.8C315,-220.8 143,-220.8 143,-220.8 137,-220.8 131,-214.8 131,-208.8 131,-208.8 131,-192.8 131,-192.8 131,-186.8 137,-180.8 143,-180.8 143,-180.8 315,-180.8 315,-180.8 321,-180.8 327,-186.8 327,-192.8 327,-192.8 327,-208.8 327,-208.8 327,-214.8 321,-220.8 315,-220.8"}}),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"207.049",y:"-206.8","font-family":"arial","font-weight":"bold","font-size":"10.00",fill:"#000000"}},[t._v("statement")]),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"188.9885",y:"-189.8","font-family":"arial","font-size":"10.00",fill:"#000000"}},[t._v("I am a statement. ")])]),t._v(" "),e("g",{staticClass:"edge",attrs:{id:"edge1"}},[e("title",[t._v("n1->n0")]),t._v(" "),e("path",{attrs:{fill:"none",stroke:"#ff0000",d:"M323.2554,-64.4281C308.0365,-88.5711 281.4263,-130.0073 250.9938,-172.5328"}}),t._v(" "),e("polygon",{attrs:{fill:"#ff0000",stroke:"#ff0000",points:"248.0693,-170.6045 245.0642,-180.7642 253.7491,-174.696 248.0693,-170.6045"}})]),t._v(" "),e("g",{staticClass:"node",attrs:{id:"node2"}},[e("title",[t._v("n2")]),t._v(" "),e("path",{attrs:{fill:"#e7298a",stroke:"#000000",d:"M230,-142.4C230,-142.4 58,-142.4 58,-142.4 52,-142.4 46,-136.4 46,-130.4 46,-130.4 46,-114.4 46,-114.4 46,-108.4 52,-102.4 58,-102.4 58,-102.4 230,-102.4 230,-102.4 236,-102.4 242,-108.4 242,-114.4 242,-114.4 242,-130.4 242,-130.4 242,-136.4 236,-142.4 230,-142.4"}}),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"118.715",y:"-128.4","font-family":"arial","font-weight":"bold","font-size":"10.00",fill:"#000000"}},[t._v("argument 2")]),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"80.0935",y:"-111.4","font-family":"arial","font-size":"10.00",fill:"#000000"}},[t._v("I am a supporting argument. ")])]),t._v(" "),e("g",{staticClass:"edge",attrs:{id:"edge3"}},[e("title",[t._v("n2->n0")]),t._v(" "),e("path",{attrs:{fill:"none",stroke:"#00ff00",d:"M165.8896,-142.5899C176.2009,-152.1006 188.6479,-163.5811 199.7533,-173.8242"}}),t._v(" "),e("polygon",{attrs:{fill:"#00ff00",stroke:"#00ff00",points:"197.4609,-176.4713 207.1846,-180.6785 202.2068,-171.3258 197.4609,-176.4713"}})]),t._v(" "),e("g",{staticClass:"node",attrs:{id:"node3"}},[e("title",[t._v("n3")]),t._v(" "),e("path",{attrs:{fill:"#66a61e",stroke:"#000000",d:"M208,-64C208,-64 36,-64 36,-64 30,-64 24,-58 24,-52 24,-52 24,-36 24,-36 24,-30 30,-24 36,-24 36,-24 208,-24 208,-24 214,-24 220,-30 220,-36 220,-36 220,-52 220,-52 220,-58 214,-64 208,-64"}}),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"96.715",y:"-50","font-family":"arial","font-weight":"bold","font-size":"10.00",fill:"#000000"}},[t._v("argument 3")]),t._v(" "),e("text",{attrs:{"text-anchor":"start",x:"59.203",y:"-33","font-family":"arial","font-size":"10.00",fill:"#000000"}},[t._v("I am an undercut argument. ")])]),t._v(" "),e("g",{staticClass:"edge",attrs:{id:"edge2"}},[e("title",[t._v("n3->n2")]),t._v(" "),e("path",{attrs:{fill:"none",stroke:"#551a8b",d:"M127.6655,-64.1899C130.0777,-72.7861 132.9415,-82.9915 135.5923,-92.438"}}),t._v(" "),e("polygon",{attrs:{fill:"#551a8b",stroke:"#551a8b",points:"132.282,-93.596 138.3537,-102.2785 139.0217,-91.7047 132.282,-93.596"}})])])])]),e("template",{slot:"source"},[e("div",{staticClass:"language-argdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-argdown"}},[e("code",[e("span",{pre:!0,attrs:{class:"token frontmatter cdata"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("===")]),t._v("\nmodel:\n    removeTagsFromText: true\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("===")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token statement class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("statement"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")])]),t._v(" I am a statement. "),e("span",{pre:!0,attrs:{class:"token hashtag cdata"}},[t._v("#tag1")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token attack operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token argument class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("argument 1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token support operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token argument class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("argument 2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token undercut operator"}},[t._v("<_")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token argument class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("argument 3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n "),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" I am a group")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token argument class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("argument 1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")])]),t._v(" I am an attacking argument. "),e("span",{pre:!0,attrs:{class:"token hashtag cdata"}},[t._v("#tag2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token argument class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("argument 2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")])]),t._v(" I am a supporting argument. "),e("span",{pre:!0,attrs:{class:"token hashtag cdata"}},[t._v("#tag3")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("##")]),t._v(" I am a subgroup")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token argument class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("argument 3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")])]),t._v(" I am an undercut argument. "),e("span",{pre:!0,attrs:{class:"token hashtag cdata"}},[t._v("#tag4")]),t._v("\n")])])])])],2),e("p",[t._v("Argument maps are directed, non-hierarchical graphs consisting of "),e("strong",[t._v("nodes")]),t._v(" and "),e("strong",[t._v("edges")]),t._v(" connecting these nodes. The nodes are visualized as boxes and the edges are visualized as arrows.")]),t._v(" "),e("p",[t._v("There are three kinds of nodes in Argdown argument maps:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Node type")]),t._v(" "),e("th",[t._v("What it looks like")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("Statement node")])]),t._v(" "),e("td",[t._v("Visualized as round box with a thick colored border and white background.")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("Argument node")])]),t._v(" "),e("td",[t._v("Visualized as round box with a colored background.")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("Group node (cluster)")])]),t._v(" "),e("td",[t._v("Visualized as grey box containing other nodes.")])])])]),t._v(" "),e("p",[t._v("To learn more about the difference between statements and arguments, read the syntax sections about "),e("a",{attrs:{href:"/syntax/arguments"}},[t._v("arguments in Argdown")]),t._v(".")]),t._v(" "),e("p",[t._v("There are three edge colors in Argdown argument maps, representing the six different "),e("router-link",{attrs:{to:"/syntax/#relations"}},[t._v("relations of Argdown")]),t._v(":")],1),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Green arrows")]),t._v(" visualize "),e("em",[t._v("support")]),t._v(" and "),e("em",[t._v("entail")]),t._v(" edges")]),t._v(" "),e("li",[e("strong",[t._v("Red arrows")]),t._v(" visualize "),e("em",[t._v("attack")]),t._v(", "),e("em",[t._v("contrary")]),t._v(" and "),e("em",[t._v("contradiction")]),t._v(" edges")]),t._v(" "),e("li",[e("strong",[t._v("Purple arrows")]),t._v(" visualize "),e("em",[t._v("undercut")]),t._v(" edges")])]),t._v(" "),e("p",[t._v("As you can see, green and red edges each can represent several types of relations. Which relation a green or a red edge represents depends on")]),t._v(" "),e("ul",[e("li",[t._v("its source and target node,")]),t._v(" "),e("li",[t._v("the arrow head")]),t._v(" "),e("li",[t._v("if the arrow points in one or both directions")]),t._v(" "),e("li",[t._v("and if you use Argdown in "),e("router-link",{attrs:{to:"/syntax/#relations-between-statements"}},[t._v("loose or strict mode")]),t._v(".")],1)]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("What you see in the map")]),t._v(" "),e("th",[t._v("What it means")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Two statement nodes are connected by a "),e("strong",[t._v("green")]),t._v(" arrow.")]),t._v(" "),e("td",[t._v("Strict mode: The source "),e("strong",[t._v("entails")]),t._v(" the target. Loose mode: The source "),e("strong",[t._v("supports")]),t._v(" the target.")])]),t._v(" "),e("tr",[e("td",[t._v("Two argument nodes or a statement and an argument node are connected by a "),e("strong",[t._v("green")]),t._v(" arrow.")]),t._v(" "),e("td",[t._v("The source "),e("strong",[t._v("supports")]),t._v(" the target.")])]),t._v(" "),e("tr",[e("td",[t._v("Two statement nodes are connected by a "),e("strong",[t._v("red arrow")]),t._v(" with triangle arrow heads going in both directions.")]),t._v(" "),e("td",[t._v("Two statements (of two equivalence classes) are "),e("strong",[t._v("contrary")]),t._v(" to each other (strict mode).")])]),t._v(" "),e("tr",[e("td",[t._v("Two statement nodes are connected by a "),e("strong",[t._v("red arrow")]),t._v(" with diamond arrow heads going in both directions.")]),t._v(" "),e("td",[t._v("Two statements (of two equivalence classes) are "),e("strong",[t._v("contradictory")]),t._v(" to each other.")])]),t._v(" "),e("tr",[e("td",[t._v("A statement or an argument is connected to another statement or argument by a directed (one-way) "),e("strong",[t._v("red arrow")]),t._v(".")]),t._v(" "),e("td",[t._v("The source "),e("strong",[t._v("attacks")]),t._v(" the target.")])]),t._v(" "),e("tr",[e("td",[t._v("Two arguments or a statement and an argument are connected by a "),e("strong",[t._v("purple arrow")]),t._v(".")]),t._v(" "),e("td",[t._v("The source "),e("strong",[t._v("undercuts")]),t._v(" the target.")])])])]),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("Equivalence")]),t._v(" "),e("p",[t._v("Note that there is no arrow representing equivalent statements. The reason behind this is that each "),e("router-link",{attrs:{to:"/syntax/#equivalence-classes"}},[t._v("equivalence class")]),t._v(" can only be represented by "),e("em",[t._v("one")]),t._v(" statement in an Argdown argument map. However, if you "),e("em",[t._v("must")]),t._v(" visualize equivalence relations in your map, you can define entailment relations between two statements going both ways. Just be aware that this will not automatically merge the two statements into the same Argdown equivalence class.")],1)])],1)},[],!1,null,null,null);a.default=n.exports}}]);